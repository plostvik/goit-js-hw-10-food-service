{"version":3,"sources":["webpack:///./index.js"],"names":["Theme","toolbar","document","querySelector","body","currentTheme","localStorage","getItem","classList","add","checked","addEventListener","setItem","replace","menuList","compiler","Handlebars","compile","console","log","menu","forEach","el","innerHTML"],"mappings":"k9JAYMA,EACG,cADHA,EAEE,aAEFC,EAAUC,SAASC,cAAc,wBACjCC,EAAOF,SAASC,cAAc,QAe9BE,EAAeC,aAAaC,QAAQ,UAAYP,EACtDI,EAAKI,UAAUC,IAAIJ,GACnBA,IAAiBL,IAAcC,EAAQS,SAAU,GAEjDT,EAAQU,iBAAiB,SAAS,WAC5BV,EAAQS,SACVJ,aAAaM,QAAQ,QAASZ,GAC9BI,EAAKI,UAAUK,QAAQ,cAAe,gBAEtCP,aAAaM,QAAQ,QAASZ,GAC9BI,EAAKI,UAAUK,QAAQ,aAAc,mBAIzCZ,EAAQU,iBAAiB,SAAS,WAC5BV,EAAQS,SACVJ,aAAaM,QAAQ,QAASZ,GAC9BI,EAAKI,UAAUK,QAAQ,cAAe,gBAEtCP,aAAaM,QAAQ,QAASZ,GAC9BI,EAAKI,UAAUK,QAAQ,aAAc,mBASzC,IAyBMC,EAAWZ,SAASC,cAAc,YAClCY,EAAWC,IAAWC,QA1BL,gzBA2BvBC,QAAQC,IAAIJ,GACZK,EAAKC,SAAQ,SAAAC,GACXR,EAASS,WAAaR,EAASO,Q","file":"main.ef015a432fa15877be09.js","sourcesContent":["import './styles.css';\nimport menu from './menu.json';\nimport Handlebars from 'handlebars';\n\n// Тема\n// Добавь функционал изменения темы при нажатии (событие change) на чекбокс #theme-switch-toggle в тулбаре.\n// По умолчанию тема светлая.\n// При изменении темы, необходимо добавлять на элемент body класс light-theme или dark-theme.\n// Выбранная тема должна сохраняться между перезагрузками страницы. Для хранения темы используй localStorage.\n// Если при загрузке страницы тема тёмная, не забудь поставить свойство checked у чекбокса #theme-switch-toggle в true, чтобы ползунок сдвинулся в правильное положение.\n// Для удобства хранения списка тем используй такое перечисление.\n\nconst Theme = {\n  LIGHT: 'light-theme',\n  DARK: 'dark-theme',\n};\nconst toolbar = document.querySelector('#theme-switch-toggle');\nconst body = document.querySelector('body');\n// ________________ПЕРВЫЙ ВАРИАНТ\n// if (!localStorage.getItem('theme')) {\n//   localStorage.setItem('theme', Theme.LIGHT);\n//   body.classList.add('light-theme');\n// } else {\n//   if (localStorage.getItem('theme') === 'dark-theme') {\n//     body.classList.add('dark-theme');\n//     toolbar.checked = true;\n//   } else {\n//     body.classList.add('light-theme');\n//   }\n// }\n\n// ________________КОРОТКИЙ ВАРИАНТ\nconst currentTheme = localStorage.getItem('theme') || Theme.LIGHT;\nbody.classList.add(currentTheme);\ncurrentTheme === Theme.DARK ? (toolbar.checked = true) : '';\n\ntoolbar.addEventListener('click', () => {\n  if (toolbar.checked) {\n    localStorage.setItem('theme', Theme.DARK);\n    body.classList.replace('light-theme', 'dark-theme');\n  } else {\n    localStorage.setItem('theme', Theme.LIGHT);\n    body.classList.replace('dark-theme', 'light-theme');\n  }\n});\n\ntoolbar.addEventListener('click', () => {\n  if (toolbar.checked) {\n    localStorage.setItem('theme', Theme.DARK);\n    body.classList.replace('light-theme', 'dark-theme');\n  } else {\n    localStorage.setItem('theme', Theme.LIGHT);\n    body.classList.replace('dark-theme', 'light-theme');\n  }\n});\n\n// Шаблонизация\n// Используя шаблонизатор Handlebars создай шаблон одного элемента меню. После чего, используя шаблон, создай разметку всего меню по данным из menu.json и добавь в DOM в ul.js-menu.\n// Для иконок используется библиотека Material Icons, линк на веб-фонт уже есть в исходном HTML.\n// Ниже указана разметка элемента меню которая должна получаться по шаблону (данные будут разные для каждого объекта).\n\nconst sourceTemplate = ` <li class=\"menu__item\">\n        <article class=\"card\">\n          <img src={{ image }} alt={{ name }} class=\"card__image\" />\n          <div class=\"card__content\">\n            <h2 class=\"card__name\">{{ name }}</h2>\n            <p class=\"card__price\">\n              <i class=\"material-icons\"> monetization_on </i>\n              {{ price }} кредитов\n            </p>\n\n            <p class=\"card__descr\">{{ description }}</p>\n\n            <ul class=\"tag-list\">\n              {{#each ingredients}}\n              <li class=\"tag-list__item\">{{this}}</li>\n              {{/each}}\n            </ul>\n          </div>\n          <button class=\"card__button button\">\n            <i class=\"material-icons button__icon\"> shopping_cart </i>В корзину\n          </button>\n        </article>\n      </li>\n    `\n\nconst menuList = document.querySelector(\".js-menu\") \nconst compiler = Handlebars.compile(sourceTemplate);\nconsole.log(compiler)\nmenu.forEach(el => {\n  menuList.innerHTML += compiler(el)\n})"],"sourceRoot":""}